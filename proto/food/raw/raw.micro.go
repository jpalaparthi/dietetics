// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/food/raw/raw.proto

/*
Package go_micro_srv_dietetics is a generated protocol buffer package.

It is generated from these files:
	proto/food/raw/raw.proto

It has these top-level messages:
	RawFood
	Nutrition
	AddNutritionRequest
	DeleteNutritionRequest
	GetRawFoodRequests
	GetRawFoodRequest
	RawFoodsResponse
	PairRequest
	GeneralResponse
*/
package go_micro_srv_dietetics

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for RawService service

type RawService interface {
	AddRawFood(ctx context.Context, in *RawFood, opts ...client.CallOption) (*GeneralResponse, error)
	AddNutrition(ctx context.Context, in *AddNutritionRequest, opts ...client.CallOption) (*GeneralResponse, error)
	DeleteNutrition(ctx context.Context, in *DeleteNutritionRequest, opts ...client.CallOption) (*GeneralResponse, error)
	UpdateRawFood(ctx context.Context, in *RawFood, opts ...client.CallOption) (*GeneralResponse, error)
	GetRawFood(ctx context.Context, in *GetRawFoodRequest, opts ...client.CallOption) (*RawFood, error)
	GetRawFoods(ctx context.Context, in *GetRawFoodRequests, opts ...client.CallOption) (*RawFoodsResponse, error)
	DeleteRawFood(ctx context.Context, in *PairRequest, opts ...client.CallOption) (*GeneralResponse, error)
}

type rawService struct {
	c    client.Client
	name string
}

func NewRawService(name string, c client.Client) RawService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.dietetics"
	}
	return &rawService{
		c:    c,
		name: name,
	}
}

func (c *rawService) AddRawFood(ctx context.Context, in *RawFood, opts ...client.CallOption) (*GeneralResponse, error) {
	req := c.c.NewRequest(c.name, "RawService.AddRawFood", in)
	out := new(GeneralResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawService) AddNutrition(ctx context.Context, in *AddNutritionRequest, opts ...client.CallOption) (*GeneralResponse, error) {
	req := c.c.NewRequest(c.name, "RawService.AddNutrition", in)
	out := new(GeneralResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawService) DeleteNutrition(ctx context.Context, in *DeleteNutritionRequest, opts ...client.CallOption) (*GeneralResponse, error) {
	req := c.c.NewRequest(c.name, "RawService.DeleteNutrition", in)
	out := new(GeneralResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawService) UpdateRawFood(ctx context.Context, in *RawFood, opts ...client.CallOption) (*GeneralResponse, error) {
	req := c.c.NewRequest(c.name, "RawService.UpdateRawFood", in)
	out := new(GeneralResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawService) GetRawFood(ctx context.Context, in *GetRawFoodRequest, opts ...client.CallOption) (*RawFood, error) {
	req := c.c.NewRequest(c.name, "RawService.GetRawFood", in)
	out := new(RawFood)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawService) GetRawFoods(ctx context.Context, in *GetRawFoodRequests, opts ...client.CallOption) (*RawFoodsResponse, error) {
	req := c.c.NewRequest(c.name, "RawService.GetRawFoods", in)
	out := new(RawFoodsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawService) DeleteRawFood(ctx context.Context, in *PairRequest, opts ...client.CallOption) (*GeneralResponse, error) {
	req := c.c.NewRequest(c.name, "RawService.DeleteRawFood", in)
	out := new(GeneralResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RawService service

type RawServiceHandler interface {
	AddRawFood(context.Context, *RawFood, *GeneralResponse) error
	AddNutrition(context.Context, *AddNutritionRequest, *GeneralResponse) error
	DeleteNutrition(context.Context, *DeleteNutritionRequest, *GeneralResponse) error
	UpdateRawFood(context.Context, *RawFood, *GeneralResponse) error
	GetRawFood(context.Context, *GetRawFoodRequest, *RawFood) error
	GetRawFoods(context.Context, *GetRawFoodRequests, *RawFoodsResponse) error
	DeleteRawFood(context.Context, *PairRequest, *GeneralResponse) error
}

func RegisterRawServiceHandler(s server.Server, hdlr RawServiceHandler, opts ...server.HandlerOption) error {
	type rawService interface {
		AddRawFood(ctx context.Context, in *RawFood, out *GeneralResponse) error
		AddNutrition(ctx context.Context, in *AddNutritionRequest, out *GeneralResponse) error
		DeleteNutrition(ctx context.Context, in *DeleteNutritionRequest, out *GeneralResponse) error
		UpdateRawFood(ctx context.Context, in *RawFood, out *GeneralResponse) error
		GetRawFood(ctx context.Context, in *GetRawFoodRequest, out *RawFood) error
		GetRawFoods(ctx context.Context, in *GetRawFoodRequests, out *RawFoodsResponse) error
		DeleteRawFood(ctx context.Context, in *PairRequest, out *GeneralResponse) error
	}
	type RawService struct {
		rawService
	}
	h := &rawServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RawService{h}, opts...))
}

type rawServiceHandler struct {
	RawServiceHandler
}

func (h *rawServiceHandler) AddRawFood(ctx context.Context, in *RawFood, out *GeneralResponse) error {
	return h.RawServiceHandler.AddRawFood(ctx, in, out)
}

func (h *rawServiceHandler) AddNutrition(ctx context.Context, in *AddNutritionRequest, out *GeneralResponse) error {
	return h.RawServiceHandler.AddNutrition(ctx, in, out)
}

func (h *rawServiceHandler) DeleteNutrition(ctx context.Context, in *DeleteNutritionRequest, out *GeneralResponse) error {
	return h.RawServiceHandler.DeleteNutrition(ctx, in, out)
}

func (h *rawServiceHandler) UpdateRawFood(ctx context.Context, in *RawFood, out *GeneralResponse) error {
	return h.RawServiceHandler.UpdateRawFood(ctx, in, out)
}

func (h *rawServiceHandler) GetRawFood(ctx context.Context, in *GetRawFoodRequest, out *RawFood) error {
	return h.RawServiceHandler.GetRawFood(ctx, in, out)
}

func (h *rawServiceHandler) GetRawFoods(ctx context.Context, in *GetRawFoodRequests, out *RawFoodsResponse) error {
	return h.RawServiceHandler.GetRawFoods(ctx, in, out)
}

func (h *rawServiceHandler) DeleteRawFood(ctx context.Context, in *PairRequest, out *GeneralResponse) error {
	return h.RawServiceHandler.DeleteRawFood(ctx, in, out)
}
